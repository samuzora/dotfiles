#!/bin/python3

import os
import sys

def parse_files():
    path = "/usr/share/applications/"

    files = os.listdir(path)
    parsed_files = {}

    for filename in files:
        if filename[-8:] == ".desktop":
            buffer = DesktopFile(path + filename)
            if buffer.data and buffer.data.get("Desktop Entry") is not None:
                name = buffer.data["Desktop Entry"].get("Name")
                exec = buffer.data["Desktop Entry"].get("Exec")
                keywords = ""
                if exec is not None:
                    if isinstance(name, str):
                        keywords += name
                    elif isinstance(name, dict) and name.get("C") is not None:
                        # mutliple locales - C is the correct one
                        name = name.get("C")
                        keywords += name

                    parsed_files[exec] = {"name": name, "keywords": keywords.lower()}
    return parsed_files

def main():
    if len(sys.argv) == 3:
        command = sys.argv[1]
        search = sys.argv[2].lower()
        parsed_files = parse_files()
        for exec in parsed_files:
            if search in parsed_files[exec]["keywords"]:
                if command == "search":
                    print(parsed_files[exec]["name"])
                elif command == "run":
                    print(exec.replace("%U", "").replace("%u", ""))
                exit()

# From: https://github.com/ArianeTeam/desktop-parser/blob/main/desktop_parser/desktop.py
class DesktopFile:
    def __init__(self, file_path=None, data={}, load=True):
        self.file_path = file_path
        self.data = data
        if load and file_path is not None:
            self._load()

    @classmethod
    def load(cls, path):
        return cls(file_path=path, load=True)

    @classmethod
    def from_dict(cls, data):
        return cls(data=data, load=False)

    @classmethod
    def from_file(cls, path):
        return cls(file_path=path, load=True)

    def _load(self, path=None):
        if path is None:
            path = self.file_path
        with open(path, 'r', encoding='utf-8') as f:
            issection = False
            section = None
            for line in f:
                line = line.strip()
                if line.startswith('#'):
                    continue
                if line == '' or line == '\n':
                    issection = False
                    continue
                if line.startswith('[') and line.endswith(']'):
                    issection = True
                    section = line[1:-1]
                    self.data[section] = {}
                    continue
                if "[" and "]" in line:
                    localekey = line.split("[")[1].split("]")[0]
                    key = line.split("[")[0]
                    try:
                        if type(self.data[section][key]) is not dict:
                            base_value = self.data[section][key]
                            if issection:
                                self.data[section][key] = {"C": base_value}
                            else:
                                self.data[key][localekey] = {"C": base_value}

                        if issection:
                            self.data[section][key][localekey] = line.split("=")[
                            1]
                        else:
                            self.data[key][localekey] = line.split("=")[1]
                    except Exception:
                        if issection:
                            self.data[section][key] = {
                                localekey: line.split("=")[1]}
                        else:
                            self.data[key] = {localekey: line.split("=")[1]}
                    continue
                if "=" in line:
                    key, value = line.split("=", 1)
                    if issection:
                        self.data[section][key] = value
                    else:
                        self.data[key] = value
                    continue

    def dump(self, path=None, headings=None, disable_generation_message=False):
        if path is None:
            path = self.file_path
        with open(path, 'w', encoding='utf-8') as f:
            if headings is not None:
                f.write(headings)
            if not disable_generation_message:
                f.write("# This file was generated by desktop-parser\n")
                f.write("# https://github.com/DesktopCreatorTeam/desktop-parser\n\n")
            for key, value in self.data.items():
                if type(value) is dict:
                    f.write("[{}]\n".format(key))
                    for k, v in value.items():
                        if type(v) is dict:
                            for l, w in v.items():
                                if l == "C":
                                    f.write("{}={}\n".format(k, w))
                                else:
                                    f.write("{}[{}]={}\n".format(k, l, w))
                        else:
                            f.write("{}={}\n".format(k, v))
                else:
                    f.write("{}={}\n".format(key, value))

if __name__ == "__main__":
    main()

#vim:set ft=python3
