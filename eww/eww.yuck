(defwindow bar
  :geometry 
  (geometry
    :x "0"
    :y "0"
    :width "100%"
    :height "64px"
    )
  :monitor 0 
  :reserve 
  (struts
    :distance "64px"
    :side "top"
    )
  :stacking "fg"
  :wm-ignore false
  (bar)
  )

(defwidget bar []
  (box
    :class "eww_bar"
    :orientation "h"
    :hexpand false
    (start)
    (center)
    (end)
    )
  )

(defwidget start []
  (box
    :halign "start"
    :space-evenly false
    :hexpand false
    (powermenu)
    (workspaces)
    )
  )

(defwidget center []
  (box
    :halign "center"
    :hexpand false
    (time)
    )
  )

(defwidget end []
  (box
    :halign "end"
    :space-evenly false
    :spacing 30
    (box
      :class "stats"
      :spacing 25
      :space-evenly false
      (battery)
      (mem)
      )
    (box
      :class "control"
      :spacing 25
      :space-evenly false
      (wifi)
      (volume)
      (brightness)
      )
    )
  )

; Start
(defwidget powermenu []
  (eventbox
    :onhover "eww update powermenu=true"
    :onhoverlost "eww update powermenu=false"
    (box
      :space-evenly false
      :spacing 25
      (box
        :class "powermenu"
        (button
          :halign "center"
          :class "lock"
          :tooltip "Lock"
          :onclick "i3lock-fancy &"
          ""
          )
        )
      (revealer
        :reveal powermenu
        :transition "slideleft"
        :duration "500ms"
        (box
          :space-evenly false
          :spacing 25
          (button
            :class "reboot"
            :tooltip "Reboot"
            :onclick "reboot"
            ""
            )
          (button
            :class "poweroff"
            :tooltip "Power off"
            :onclick "shutdown now"
            " "
            )
          )
        )
      )
    )
  )

(defvar powermenu false)

(defwidget workspaces []
  (literal 
    :valign "center"
    :content workspace-listener
    )
  )
(deflisten workspace-listener "scripts/workspace")

; Center
(defwidget time [] 
  (eventbox
    :onhover "eww update time=false date=true"
    :onhoverlost "eww update time=true date=false"
    :hexpand false
    :class "time"
    (box
      :space-evenly false
      :spacing 2
      (revealer
        :transition "slideleft"
        :reveal time
        :duration "500ms"
        (button
          :class "time"
          :onclick "eww open --toggle calendar"
          time-value
          )
        )
      (revealer
        :transition "slideleft"
        :reveal date
        :duration "500ms"
        (button
          :class "time"
          :onclick "eww open --toggle calendar"
          "${calendar-day} ${calendar-month}"
          )
        )
      )
    )
  )
(defvar time true)
(defvar date false)
(defpoll time-value 
  :interval "1s" 
  "date '+%H %M'"
  )

; Calendar window
(defwindow calendar
  :geometry (geometry 
  :x "0%" 
  :y "50px" 
  :anchor "top center"
  :width "270px" 
  :height "60px")
  :stacking "fg"
  (box
    :class "cal-box"
    (box 
      :class "cal-inner-box"
      (calendar 
        :class "cal"
        :day calendar-day
        :month calendar-month
        :year calendar-year
        )
      )
    )
  )

(defpoll calendar-day 
  :interval "1s"
  "date +%d"
  )

(defpoll calendar-month
  :interval "12h"
  "date +%m"
  )

(defpoll calendar-year
  :interval "12h"
  "date +%Y"
  )

; End
(defwidget battery []
  (progress
    :valign "center"
    :value "${EWW_BATTERY.BAT0.capacity}"
    :class "${EWW_BATTERY.BAT0.status}"
    )
  )

(defwidget mem []
  (progress
    :valign "center"
    :value "${EWW_RAM.used_mem_perc}"
    :class "ram"
    )
  )

(defwidget wifi []
  (eventbox
    :onhover "eww update show-wifi=true"
    :onhoverlost "eww update show-wifi=false"
    (box
      :space-evenly false
      :spacing 5
      (button
        :class is-wifi-connected
        :onclick "scripts/popup wifi"
        ""
        )
      (revealer
        :reveal show-wifi
        :transition "slideright"
        :duration "400ms"
        (box
          :class "wifi-name"
          wifi-name
          )
        )
      )
    )
  )

(defvar show-wifi false)

(defpoll is-wifi-connected
  :interval "1s" "scripts/wifi icon"
  )

(defpoll wifi-name
  :interval "1s" "scripts/wifi name"
  )

(defwidget volume []
  (eventbox
    :onhover "eww update volume=true"
    :onhoverlost "eww update volume=false"
    (box
      :space-evenly false
      :spacing 5
      (button
        :class "volume-icon"
        ""
        )
      (revealer
        :reveal volume
        :transition "slideright"
        :duration "400ms"
        (scale
          :class "volume-bar"
          :value current-volume
          :max 100
          :min 0
          :onchange "amixer -D pulse sset Master {}%"
          )
        )
      )
    )
  )

(defpoll current-volume 
  :interval "10s" 
  "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'"
  )
(defvar volume false)

(defwidget brightness []
  (eventbox
    :onhover "eww update brightness=true"
    :onhoverlost "eww update brightness=false"
    (box
      :space-evenly false
      :spacing 5
      (button
        :class "brightness-icon"
        ""
        )
      (revealer
        :reveal brightness
        :transition "slideright"
        :duration "400ms"
        (scale
          :class "brightness-bar"
          :value current-brightness
          :max 100
          :min 20
          :onchange "brightnessctl set {}%" 
          )
        )
      )
    )
  )

(defpoll current-brightness 
  :interval "10s" 
  "brightnessctl -m -d intel_backlight | awk -F, '{print substr($4, 0, length($4)-1)}' | tr -d '%'"
  )
(defvar brightness false)
